// Importa os mÃ³dulos necessÃ¡rios
const express = require('express');              // Framework para criaÃ§Ã£o de aplicaÃ§Ãµes web
const cors = require('cors');                    // Middleware para permitir requisiÃ§Ãµes entre domÃ­nios (Cross-Origin)
const { faker } = require('@faker-js/faker');    // Biblioteca para geraÃ§Ã£o de dados falsos (nÃ£o usada aqui, mas pode ser Ãºtil)
const path = require("path");                    // MÃ³dulo para lidar com caminhos de arquivos de forma segura
const fs = require('fs');                        // MÃ³dulo para manipulaÃ§Ã£o de arquivos do sistema

// Inicializa o app Express
const app = express();

// Define o endereÃ§o e porta em que o servidor vai escutar
const HOST = '0.0.0.0';
const PORT = 3000;

// Configura o Express para servir arquivos estÃ¡ticos da pasta "public"
// Isso permite acessar arquivos como index.html diretamente
app.use(express.static(path.join(__dirname, "public")));

// Ativa o CORS para permitir chamadas HTTP de outras origens (por exemplo, frontend em outro servidor)
app.use(cors());

/**
 * FunÃ§Ã£o que lÃª o arquivo usuarios.json e retorna atÃ© 'qtd' usuÃ¡rios
 * Se houver erro na leitura, retorna um array vazio
 */
function lerUsuarios(qtd) {
  try {
    const dados = fs.readFileSync('usuarios.json', 'utf-8'); // LÃª o conteÃºdo do arquivo
    const usuarios = JSON.parse(dados);                      // Converte a string JSON em array de objetos

    // Retorna apenas os primeiros 'qtd' usuÃ¡rios, sem ultrapassar o total disponÃ­vel
    return usuarios.slice(0, Math.min(qtd, usuarios.length));
  } catch (erro) {
    // Em caso de erro (arquivo ausente ou malformado), exibe no console e retorna array vazio
    console.error('Erro ao ler o arquivo usuarios.json:', erro);
    return [];
  }
}

// Rota principal ("/")
// Envia o arquivo index.html que estÃ¡ na pasta "public"
app.get("/", (req, res) => {
  res.sendFile(path.join(__dirname, "public") + "index.html");
});

// Rota "/list-users/:count?"
// Retorna um JSON com atÃ© 'count' usuÃ¡rios do arquivo usuarios.json
app.get('/list-users/:count?', (req, res) => {
  let num = parseInt(req.params.count); // LÃª o parÃ¢metro :count e converte para nÃºmero

  // Define valor padrÃ£o e limites de seguranÃ§a
  if (isNaN(num)) num = 100;
  if (num < 100) num = 100;
  if (num > 1_000_000) num = 1_000_000;

  // Envia os usuÃ¡rios lidos como resposta JSON
  res.json(lerUsuarios(num));
});

// Inicia o servidor e exibe a URL no console
app.listen(PORT, HOST, () => {
  console.log(`ğŸš€ Servidor rodando em http://${HOST}:${PORT}`);
});
